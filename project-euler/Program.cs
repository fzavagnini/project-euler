using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Security.Cryptography.X509Certificates;

namespace project_euler
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            //var sum = GetMultipleOfMultiplesSum(new int[] { 3, 5 }, 1000);
            //var evenFibonacciSum = GetEvenFibonacciNumbersSum(4000000);
            //var largestPrimeFactor = LargestPrimeFactorNumber(600851475143);
            //var largestPalindrome = FindLargestPalindrome(3);
            //var smallestMultiple = FindSmallestMultiple(1, 20);
            var sumSquareDifference = FindSumSquareDifference(100);
            var nthPrimeNumber = FindTheNthPrimeNumber(10001);
        }

        //Multiples of 3 and 5
        //Problem 1

        //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        //Find the sum of all the multiples of 3 or 5 below 1000.
        public static long GetMultipleOfMultiplesSum(int[] multipleOfArr, int value)
        {
            var sum = 0;
            List<Tuple<int, int>> multipleValuesTuplist = new List<Tuple<int, int>>();
            List<long> multipleValues = new List<long>();

            for (int i = 1; i < value; i++)
            {
                for (int j = 0; j < multipleOfArr.Length; j++)
                {
                    if (i % multipleOfArr[j] == 0)
                    {
                        multipleValuesTuplist.Add(new Tuple<int, int>(multipleOfArr[j], i));
                    }
                }
            }

            multipleValuesTuplist.ForEach(x=> multipleValues.Add(x.Item2));

            return multipleValues.Distinct().Sum();
        }

        //Even Fibonacci numbers
        //Problem 2
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be:

        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        
        public static int GetEvenFibonacciNumbersSum(int value)
        {
            List<int> fibonacciList = new List<int>();
            var fibonacciEvenList = new List<int>();

            var first = 0;
            var second = 1;
            
            for (int i = 2; i < value; i++)
            {
                var actual = first + second;
                
                if (actual > value)
                {
                    foreach (var even in fibonacciList)
                    {
                        if (even % 2 == 0)
                        {
                            fibonacciEvenList.Add(even);
                        }
                    }
                    return fibonacciEvenList.Sum();
                }

                fibonacciList.Add(actual);
                first = second;
                second = actual;
            }

            return fibonacciList.Sum();
        }

        //Largest prime factor

        //Problem 3
        //The prime factors of 13195 are 5, 7, 13 and 29.

        public static long LargestPrimeFactorNumber(long value, List<long> factors = null)
        {
            if (!HasPrimes(value))
            {
                return factors.Last();
            }

            if (factors == null)
            {
                factors = new List<long>();
                
                for (int i = 1; i < Math.Sqrt(value); i++)
                {
                    if (value % i == 0)
                    {
                        factors.Add(i);
                    }
                }
            }

            for (int i = 1; i < factors.Count; i++)
            {
                if (value % factors[i] == 0)
                {
                    factors.Remove(value);
                }
            }
            
            return LargestPrimeFactorNumber(factors.Last(), factors);
            
        }

        private static bool HasPrimes(long number)
        {
            List<long> listOfPrimes = new List<long>();

            for (long i = 1; i < Math.Sqrt(number); i++)
            {
                if (number % i == 0)
                {
                    listOfPrimes.Add(i);
                }
            }

            return listOfPrimes.Count > 1;
        }

        //Largest palindrome product

        //Problem 4
        //A palindromic number reads the same both ways.The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        //Find the largest palindrome made from the product of two 3-digit numbers.

        public static int FindLargestPalindrome(int digits)
        {
            List<string> listOfNumbers = new List<string>();
            List<int> listOfLargestPalindromeNumbers = new List<int>();

            for (int i = 1; i < Math.Pow(10, digits); i++)
            {
                for (int j = 1; j < Math.Pow(10, digits); j++)
                {
                    var value = i * j;
                    listOfNumbers.Add(Convert.ToString(value));
                }
            }

            Dictionary<int, List<string>> possiblePalindromes = new Dictionary<int, List<string>>();

            for (int i = 10; 0 < i; --i)
            {
                possiblePalindromes.Add(i, listOfNumbers.FindAll(x => x.StartsWith(Convert.ToString(i)) && x.EndsWith(Convert.ToString(i))));
            }

            foreach (var listOfPalindromes in possiblePalindromes)
            {
                for (int i = 0; i < listOfPalindromes.Value.Count; i++)
                {
                    var number = listOfPalindromes.Value[i].ToCharArray();

                    var counter = 1;

                    for (int j = 0; j < number.Length; j++)
                    {
                        if (counter == number.Length)
                        {
                            listOfLargestPalindromeNumbers.Add(Convert.ToInt32(listOfPalindromes.Value[i]));
                        }

                        if (number[j] == number[^counter])
                        {
                            counter++;
                        }
                    }
                }
            }

            return listOfLargestPalindromeNumbers.Max();
        }

        //Smallest multiple

        //Problem 5

        //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        public static int FindSmallestMultiple(int a, int b)
        {
            List<int> list = new List<int>();
            bool[] isDivisibleByAll = new bool[b];
            int smallestMultiple = 0;

            list.Add(1);

            for (int i = 1; i < list.Count + 1; i++)
            {
                list.Add(i + 1);

                for (int j = a; j <= b; j++)
                {
                    isDivisibleByAll[j - 1] = i % j == 0;
                }

                if (isDivisibleByAll.All(x=>x))
                {
                    smallestMultiple = i;
                }

            }

            return smallestMultiple;
        }

        //Sum square difference

        //Problem 6

        //The sum of the squares of the first ten natural numbers is,
        //12+22+...+102=385
        //The square of the sum of the first ten natural numbers is,

        //(1+2+...+10)2=552=3025
        //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.

        //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

        public static int FindSumSquareDifference(int number)
        {

            var sumOfTheSquares = 0;
            var squareOfTheSum = 0;

            for (int i = 1; i < number + 1; i++)
            {
                sumOfTheSquares += i * i;
            }

            for (int i = 1; i < number + 1; i++)
            {
                squareOfTheSum += i;
            }

            var difference = squareOfTheSum * squareOfTheSum - sumOfTheSquares;

            return difference;
        }


        public static int FindTheNthPrimeNumber(int number)
        {
            int[] primeNumbers = new int[number];
            int value = 0;
            int[] numbersLessThan = new int[number - value];
            

            int count = 1;

            for (int i = 2; i < primeNumbers.Length; i++)
            {
                bool[] isDivisibleByArr = new bool[i];
                for (int j = 1; j <= i; j++)
                {
                    
                    if (i % j == 0)
                    {
                        isDivisibleByArr[j - 1] = true;
                    }

                    if (isDivisibleByArr[0] && isDivisibleByArr[^j])
                    {
                        primeNumbers[i] = i;
                    }
                }

                count++;
            }
            return primeNumbers[number-1];
        }
    }

}
